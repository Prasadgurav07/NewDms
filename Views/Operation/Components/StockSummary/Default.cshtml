@model NewDms.Models.ReportSummary




@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@


@* <a id="sum_options" class="nav-link dropdown-toggle text-decoration-none text-black" style="width:fit-content;font-size:20px;" data-bs-toggle="dropdown" asp-controller="Operation" asp-action="Dashboard" aria-expanded="false">Sate Wise</a>

<ul class="dropdown-menu shadow" id="sumryoptions">
    <li class="dropdown-item" id="ByState">By State</li>
    <li class="dropdown-item" id="ByWarehouse">By Warehouse</li>
    <li class="dropdown-item" id="ByCCM">By CCM</li>
</ul>
 *@


<div class="row" style="display:block;overflow:scroll;height:700px;">
    <h5>Stock Report</h5>
    <div class="col-lg-8">
        <table class="table table-bordered table-responsive-lg" id="stockreport">
            <thead class="bg-dark text-light">
                <tr>
                    <th scope="col">Sr.No.</th>
                    <th scope="col">State</th>
                    <th scope="col">State Head</th>
                    <th scope="col">AHM/HM</th>
                    <th scope="col">CCM</th>
                    <th scope="col">CM</th>
                    <th scope="col">Warehouse</th>
                    <th scope="col">Stock</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int i = 1;
                }
                @foreach(var item in Model._StockReport)
                {
                    <tr>
                        <td>@i</td>
                        <td>@item.State</td>
                        <td>@item.SH</td>
                        <td>@item.HM</td>
                        <td>@item.CCM</td>
                        <td>@item.CM</td>
                        <td>@item._Warehousename</td>
                        <td>@item.wstock</td>
                    </tr>
                    i++;
                }

            </tbody>
        </table>
    </div>
</div>



<script>


        function enableTableFilter(tableId) {
        const table = document.getElementById(tableId);
        if (!table) {
            console.error("Table not found:", tableId);
            return;
        }

        const thead = table.querySelector("thead");
        const tbody = table.querySelector("tbody");
        if (!thead || !tbody) {
            console.error("Table missing <thead> or <tbody>:", tableId);
            return;
        }

        const headerRow = thead.querySelector("tr");
        const colCount = headerRow.children.length;

        // Remove existing filter row if any
        const existingFilterRow = thead.querySelector(".filter-row");
        if (existingFilterRow) existingFilterRow.remove();

        // Create a new filter row under headers
        const filterRow = document.createElement("tr");
        filterRow.classList.add("filter-row");
        filterRow.style.backgroundColor = "#f0f0f0";
        filterRow.style.fontSize = "12px";

        for (let i = 0; i < colCount; i++) {
            const th = document.createElement("th");
            const select = document.createElement("select");
            select.innerHTML = '<option value="">All</option>';

            // Function to populate dropdown based on visible rows
            function populateOptions() {
                // Get unique values from visible rows
                const uniqueValues = [...new Set(
                    Array.from(tbody.rows)
                        .filter(row => row.style.display !== "none")
                        .map(row => row.cells[i]?.innerText.trim())
                        .filter(val => val)
                )].sort();

                // Clear old options except "All"
                select.innerHTML = '<option value="">All</option>';

                uniqueValues.forEach(val => {
                    const opt = document.createElement("option");
                    opt.value = val;
                    opt.textContent = val;
                    select.appendChild(opt);
                });
            }

            // Populate initially
            populateOptions();

            // Add event listener for filtering
            select.addEventListener("change", () => {
                const filters = Array.from(filterRow.querySelectorAll("select")).map(s => s.value);

                Array.from(tbody.rows).forEach(row => {
                    let visible = true;
                    filters.forEach((val, index) => {
                        if (val) {
                            const cellText = row.cells[index]?.innerText.trim();
                            if (cellText !== val) visible = false;
                        }
                    });
                    row.style.display = visible ? "table-row" : "none";
                });

                // After filtering, update all dropdowns based on visible rows
                Array.from(filterRow.querySelectorAll("select")).forEach(s => {
                    const colIndex = Array.from(filterRow.children).indexOf(s.parentElement);
                    // Keep current selection
                    const currentValue = s.value;
                    // Re-populate options based on visible rows
                    const uniqueValues = [...new Set(
                        Array.from(tbody.rows)
                            .filter(row => row.style.display !== "none")
                            .map(row => row.cells[colIndex]?.innerText.trim())
                            .filter(val => val)
                    )].sort();

                    s.innerHTML = '<option value="">All</option>';
                    uniqueValues.forEach(val => {
                        const opt = document.createElement("option");
                        opt.value = val;
                        opt.textContent = val;
                        s.appendChild(opt);
                    });
                    // Restore previous selection if still available
                    if (uniqueValues.includes(currentValue)) s.value = currentValue;
                });
            });

            th.appendChild(select);
            filterRow.appendChild(th);

            // Optionally hide first and last filters
            if (i === 0 || i === colCount - 1) {
                select.style.visibility = "hidden";
            }
        }

        // Insert filter row below the header
        thead.appendChild(filterRow);
    }


    enableTableFilter("stockreport");

</script>
